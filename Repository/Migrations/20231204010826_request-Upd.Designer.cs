// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Services;

#nullable disable

namespace Services.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231204010826_request-Upd")]
    partial class requestUpd
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Appointment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("day")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("DoctorId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Core.Models.Coupon", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("Discoundvalue")
                        .HasColumnType("int");

                    b.Property<string>("discoundCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("discoundType")
                        .HasColumnType("int");

                    b.Property<int>("requestNumber")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<int>("usage")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("coupons");
                });

            modelBuilder.Entity("Core.Models.Doctor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("SpecializeId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("numberOfRequests")
                        .HasColumnType("int");

                    b.Property<double>("price")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("SpecializeId");

                    b.HasIndex("UserId");

                    b.ToTable("doctors");
                });

            modelBuilder.Entity("Core.Models.Requests", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("couponId")
                        .HasColumnType("int");

                    b.Property<int>("doctorId")
                        .HasColumnType("int");

                    b.Property<int>("finalPrice")
                        .HasColumnType("int");

                    b.Property<string>("pationtId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("requestDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("requestType")
                        .HasColumnType("int");

                    b.Property<int>("timeid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("couponId");

                    b.HasIndex("doctorId");

                    b.HasIndex("pationtId");

                    b.HasIndex("timeid");

                    b.ToTable("requests");
                });

            modelBuilder.Entity("Core.Models.Specialize", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("numberOfRequest")
                        .HasColumnType("int");

                    b.Property<string>("specializeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("specializes");

                    b.HasData(
                        new
                        {
                            id = 1,
                            numberOfRequest = 0,
                            specializeName = "Immunologists"
                        },
                        new
                        {
                            id = 2,
                            numberOfRequest = 0,
                            specializeName = "Cardiologists"
                        },
                        new
                        {
                            id = 3,
                            numberOfRequest = 0,
                            specializeName = "Dermatologists"
                        },
                        new
                        {
                            id = 4,
                            numberOfRequest = 0,
                            specializeName = "Endocrinologists"
                        },
                        new
                        {
                            id = 5,
                            numberOfRequest = 0,
                            specializeName = "Gastroenterologists"
                        },
                        new
                        {
                            id = 6,
                            numberOfRequest = 0,
                            specializeName = "Hematologists"
                        },
                        new
                        {
                            id = 7,
                            numberOfRequest = 0,
                            specializeName = "Internists"
                        },
                        new
                        {
                            id = 8,
                            numberOfRequest = 0,
                            specializeName = "Nephrologists"
                        },
                        new
                        {
                            id = 9,
                            numberOfRequest = 0,
                            specializeName = "Neurologists"
                        },
                        new
                        {
                            id = 10,
                            numberOfRequest = 0,
                            specializeName = "Obstetricians and Gynecologists"
                        },
                        new
                        {
                            id = 11,
                            numberOfRequest = 0,
                            specializeName = "Oncologists"
                        },
                        new
                        {
                            id = 12,
                            numberOfRequest = 0,
                            specializeName = "Ophthalmologists"
                        },
                        new
                        {
                            id = 13,
                            numberOfRequest = 0,
                            specializeName = "Osteopaths"
                        },
                        new
                        {
                            id = 14,
                            numberOfRequest = 0,
                            specializeName = "Otolaryngologists"
                        },
                        new
                        {
                            id = 15,
                            numberOfRequest = 0,
                            specializeName = "Pediatricians"
                        },
                        new
                        {
                            id = 16,
                            numberOfRequest = 0,
                            specializeName = "Psychiatrists"
                        },
                        new
                        {
                            id = 17,
                            numberOfRequest = 0,
                            specializeName = "Rheumatologists"
                        },
                        new
                        {
                            id = 18,
                            numberOfRequest = 0,
                            specializeName = "Urologists"
                        });
                });

            modelBuilder.Entity("Core.Models.Time", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("appointmentid")
                        .HasColumnType("int");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.Property<double>("time")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.HasIndex("appointmentid");

                    b.ToTable("times");
                });

            modelBuilder.Entity("Core.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("dateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("gender")
                        .HasColumnType("int");

                    b.Property<string>("image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("role")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "46e6e3eb-c032-48c5-8901-0ab43dcf66f3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "eafca9d6-013c-419e-b26c-864df6684626",
                            Email = "KarimKamel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "012586444825",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "803a24a4-a78b-4305-8b5a-da4bdf48916e",
                            TwoFactorEnabled = false,
                            UserName = "karimkamel",
                            dateOfBirth = new DateTime(2023, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            gender = 1,
                            role = 1
                        },
                        new
                        {
                            Id = "17ff6f2c-899b-4faa-8cf5-fb83a18fd764",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a9b6e5e-091c-4cc5-9602-523db930e76d",
                            Email = "Karimahmed@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "012545455825",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b4fd38e3-5739-45d1-953c-c997f7524240",
                            TwoFactorEnabled = false,
                            UserName = "karimAhmed",
                            dateOfBirth = new DateTime(2023, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            gender = 1,
                            role = 2
                        },
                        new
                        {
                            Id = "610b9093-3a6c-4c58-bbc6-e41ba770cdc4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9077597b-bd47-4725-9764-0c175f2800eb",
                            Email = "Karim@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "012586444825",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "a2c6bc8f-18a0-4d89-8df6-2019056125e4",
                            TwoFactorEnabled = false,
                            UserName = "karim",
                            dateOfBirth = new DateTime(2023, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            gender = 1,
                            role = 2
                        },
                        new
                        {
                            Id = "911ab4d6-c3f9-4f1d-b56f-9a041d49fec9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "6912ffa5-245b-460d-a524-d5c2f6a40a35",
                            Email = "SaraKamel@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "012586444825",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57052700-bf13-434f-86d5-c9f4c91dd92f",
                            TwoFactorEnabled = false,
                            UserName = "Sarakamel",
                            dateOfBirth = new DateTime(2023, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            gender = 0,
                            role = 0
                        },
                        new
                        {
                            Id = "0bc38a14-1c57-449d-a5be-c768abc7e919",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a4c38d0e-0df2-44ec-bee6-158f3bdfb2f5",
                            Email = "Karimsssail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "012586444825",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d423674e-0a51-4184-bac9-abad8a42a827",
                            TwoFactorEnabled = false,
                            UserName = "karimssss",
                            dateOfBirth = new DateTime(2023, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            gender = 1,
                            role = 0
                        },
                        new
                        {
                            Id = "bf2ebd4f-1df7-46e0-99ff-7195eab027f1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d822ab7e-e0de-4429-b868-a712a617a19e",
                            Email = "ahmedsssail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "012586444825",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "79dcdb4a-aafa-4d50-8699-245739b4e8da",
                            TwoFactorEnabled = false,
                            UserName = "Ahmed",
                            dateOfBirth = new DateTime(2023, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            gender = 1,
                            role = 0
                        },
                        new
                        {
                            Id = "9dd1a84a-980a-47e0-854c-52e69d776fee",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "55e40dc6-a916-4092-9d20-47495f22548f",
                            Email = "Karimssddsail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PhoneNumber = "012586444825",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b7b20c88-1336-42e0-9dea-986fd097c175",
                            TwoFactorEnabled = false,
                            UserName = "karimssdddss",
                            dateOfBirth = new DateTime(2023, 12, 4, 0, 0, 0, 0, DateTimeKind.Local),
                            gender = 1,
                            role = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Core.Models.Appointment", b =>
                {
                    b.HasOne("Core.Models.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("doctor");
                });

            modelBuilder.Entity("Core.Models.Doctor", b =>
                {
                    b.HasOne("Core.Models.Specialize", "Specialize")
                        .WithMany()
                        .HasForeignKey("SpecializeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Specialize");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Core.Models.Requests", b =>
                {
                    b.HasOne("Core.Models.Coupon", "coupon")
                        .WithMany()
                        .HasForeignKey("couponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Doctor", "doctor")
                        .WithMany()
                        .HasForeignKey("doctorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Models.User", "pationt")
                        .WithMany()
                        .HasForeignKey("pationtId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Core.Models.Time", "time")
                        .WithMany()
                        .HasForeignKey("timeid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("coupon");

                    b.Navigation("doctor");

                    b.Navigation("pationt");

                    b.Navigation("time");
                });

            modelBuilder.Entity("Core.Models.Time", b =>
                {
                    b.HasOne("Core.Models.Appointment", "appointment")
                        .WithMany()
                        .HasForeignKey("appointmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("appointment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Core.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
